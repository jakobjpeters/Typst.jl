var documenterSearchIndex = {"docs":
[{"location":"references/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"references/internals/","page":"Internals","title":"Internals","text":"This reference documents non-public utilities.","category":"page"},{"location":"references/internals/","page":"Internals","title":"Internals","text":"info: Info\nA Dates.jl package extension would currently print warnings during precompilation. See also the Julia issue #52511","category":"page"},{"location":"references/internals/","page":"Internals","title":"Internals","text":"Typstry.examples","category":"page"},{"location":"references/internals/#Typstry.examples","page":"Internals","title":"Typstry.examples","text":"examples\n\nA constant Vector of Julia values and their corresponding Types implemented for show_typst.\n\n\n\n\n\n","category":"constant"},{"location":"references/internals/#Utilities.jl","page":"Internals","title":"Utilities.jl","text":"","category":"section"},{"location":"references/internals/","page":"Internals","title":"Internals","text":"Typstry.typst_mime\nTypstry.apply\nTypstry.compile_workload\nTypstry.code_mode\nTypstry.date_time\nTypstry.dates\nTypstry.default_context\nTypstry.duration\nTypstry.enclose\nTypstry.escape\nTypstry.indent\nTypstry.format\nTypstry.join_with\nTypstry.math_mode\nTypstry.math_pad\nTypstry.merge_contexts!\nTypstry.show_array\nTypstry.show_parameters\nTypstry.show_raw\nTypstry.show_vector\nTypstry.typst_context\nTypstry.unwrap","category":"page"},{"location":"references/internals/#Typstry.typst_mime","page":"Internals","title":"Typstry.typst_mime","text":"typst_mime\n\nEquivalent to MIME\"text/typst\"().\n\nExamples\n\njulia> Typstry.typst_mime\nMIME type text/typst\n\n\n\n\n\n","category":"constant"},{"location":"references/internals/#Typstry.apply","page":"Internals","title":"Typstry.apply","text":"apply(f, tc, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.compile_workload","page":"Internals","title":"Typstry.compile_workload","text":"compile_workload(examples)\n\nGiven an iterable of value-type pairs, interpolate each value into a @typst_str within a PrecompileTools.@compile_workload block.\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.code_mode","page":"Internals","title":"Typstry.code_mode","text":"code_mode(io, tc)\n\nPrint the number sign, unless mode(tc) == code.\n\nSee also Mode and mode.\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.date_time","page":"Internals","title":"Typstry.date_time","text":"date_time(::Union{Dates.Date, Dates.Time, Dates.DateTime})\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.dates","page":"Internals","title":"Typstry.dates","text":"dates(::Union{Dates.Date, Dates.DateTime, Dates.Period, Dates.Time})\n\nExamples\n\njulia> Typstry.dates(Dates.Date(1))\n(\"datetime\", (:year, :month, :day), (1, 1, 1))\n\njulia> Typstry.dates(Dates.Day(1))\n(\"duration\", (:days,), (TypstText(\"1\"),))\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.default_context","page":"Internals","title":"Typstry.default_context","text":"default_context\n\n\n\n\n\n","category":"constant"},{"location":"references/internals/#Typstry.duration","page":"Internals","title":"Typstry.duration","text":"duration(::Dates.Period)\n\nExamples\n\njulia> Typstry.duration(Dates.Day(1))\n:days\n\njulia> Typstry.duration(Dates.Hour(1))\n:hours\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.enclose","page":"Internals","title":"Typstry.enclose","text":"enclose(f, io, x, left, right = reverse(left); kwargs...)\n\nCall f(io, x; kwargs...) between printing left and right, respectfully.\n\nExamples\n\njulia> Typstry.enclose((io, i; x) -> print(io, i, x), stdout, 1, \"\\$ \"; x = \"x\")\n$ 1x $\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.escape","page":"Internals","title":"Typstry.escape","text":"escape(io, n)\n\nPrint \\ to io n times.\n\nExamples\n\njulia> Typstry.escape(stdout, 2)\n\\\\\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.indent","page":"Internals","title":"Typstry.indent","text":"indent(tc)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.format","page":"Internals","title":"Typstry.format","text":"format(::Union{MIME\"application/pdf\", MIME\"image/png\", MIME\"image/svg+xml\"})\n\nReturn the image format acronym corresponding to the given MIME.\n\nExamples\n\njulia> Typstry.format(MIME\"application/pdf\"())\n\"pdf\"\n\njulia> Typstry.format(MIME\"image/png\"())\n\"png\"\n\njulia> Typstry.format(MIME\"image/svg+xml\"())\n\"svg\"\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.join_with","page":"Internals","title":"Typstry.join_with","text":"join_with(f, io, xs, delimeter; kwargs...)\n\nSimilar to join, except printing with f(io, x; kwargs...).\n\nExamples\n\njulia> Typstry.join_with((io, i; x) -> print(io, -i, x), stdout, 1:4, \", \"; x = \"x\")\n-1x, -2x, -3x, -4x\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.math_mode","page":"Internals","title":"Typstry.math_mode","text":"math_mode(f, io, tc, x; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.math_pad","page":"Internals","title":"Typstry.math_pad","text":"math_pad(tc)\n\nReturn \"\", \"\\$\", or \"\\$ \" depending on the block and mode settings.\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.merge_contexts!","page":"Internals","title":"Typstry.merge_contexts!","text":"merge_contexts!(tc, context)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.show_array","page":"Internals","title":"Typstry.show_array","text":"show_array(io, x)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.show_parameters","page":"Internals","title":"Typstry.show_parameters","text":"show_parameters(io, tc, f, keys, final)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.show_raw","page":"Internals","title":"Typstry.show_raw","text":"show_raw(f, io, tc, x, language)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.show_vector","page":"Internals","title":"Typstry.show_vector","text":"show_vector(io, tc, x)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.typst_context","page":"Internals","title":"Typstry.typst_context","text":"typst_context(io)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.unwrap","page":"Internals","title":"Typstry.unwrap","text":"unwrap(x, key::Symbol, default)\nunwrap(x, type::Type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Strings","page":"Internals","title":"Strings","text":"","category":"section"},{"location":"references/internals/","page":"Internals","title":"Internals","text":"Typstry.backticks\nTypstry.base_type\nTypstry.block\nTypstry.depth\nTypstry.mode\nTypstry.parenthesize\nTypstry.preamble\nTypstry.tab_size","category":"page"},{"location":"references/internals/#Typstry.backticks","page":"Internals","title":"Typstry.backticks","text":"backticks\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.base_type","page":"Internals","title":"Typstry.base_type","text":"base_type(x)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.block","page":"Internals","title":"Typstry.block","text":"block\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.depth","page":"Internals","title":"Typstry.depth","text":"depth\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.mode","page":"Internals","title":"Typstry.mode","text":"mode\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.parenthesize","page":"Internals","title":"Typstry.parenthesize","text":"parenthesize\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.preamble","page":"Internals","title":"Typstry.preamble","text":"preamble\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.tab_size","page":"Internals","title":"Typstry.tab_size","text":"tab_size\n\n\n\n\n\n","category":"function"},{"location":"guides/package_interoperability/#Package-Interoperability","page":"Package Interoperability","title":"Package Interoperability","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"This guide illustrates how to use Typstry.jl in compatible notebooks and packages.","category":"page"},{"location":"guides/package_interoperability/#Notebooks","page":"Package Interoperability","title":"Notebooks","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"IJulia.jl, Pluto.jl, and QuartoNotebookRunner.jl each display TypstStrings, TypstTexts, and Typsts using show with the application/pdf, image/png, and image/svg+xml MIME types.","category":"page"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"tip: Tip\nUse set_context to customize the default formatting in these environments.","category":"page"},{"location":"guides/package_interoperability/#Typst-Packages","page":"Package Interoperability","title":"Typst Packages","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"Compiling a document which imports a Typst package can be achieved in exactly the same manner as compiling a standard Typst source file with the command-line interface. For example, typst\"#import \\\"@namespace/name:version\\\"\".","category":"page"},{"location":"guides/package_interoperability/#Julia-Packages","page":"Package Interoperability","title":"Julia Packages","text":"","category":"section"},{"location":"guides/package_interoperability/#Literate.jl","page":"Package Interoperability","title":"Literate.jl","text":"","category":"section"},{"location":"guides/package_interoperability/#MakieTeX.jl","page":"Package Interoperability","title":"MakieTeX.jl","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"note: Note\nThis package re-exports @typst_str and TypstString.","category":"page"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"using Markdown: Markdown\nMarkdown.parse(\"\"\"```julia-repl\njulia> using CairoMakie, MakieTeX\n\njulia> f = Figure(; size = (100, 100))\n\njulia> LTeX(f[1, 1], TypstDocument(typst\"\\$ 1 / x \\$\"))\n\njulia> save(\"makie_tex.svg\", f)\n```\"\"\")","category":"page"},{"location":"guides/package_interoperability/#TypstJlyfish.jl","page":"Package Interoperability","title":"TypstJlyfish.jl","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"import Markdown\nMarkdown.parse(\"\"\"\n```typst\n#import \"@preview/jlyfish:0.1.0\": *\n#read-julia-output(json(\"typst_jlyfish.json\"))\n#jl-pkg(\"Typstry\")\n#jl(`using Typstry; typst\"\\$1 / x\\$\"`)\n```\n```julia-repl\njulia> using TypstJlyfish, Typstry\n\njulia> TypstJlyfish.compile(\"typst_jlyfish.typ\"; evaluation_file = \"typst_jlyfish.json\")\n```\n\"\"\")","category":"page"},{"location":"guides/the_julia_to_typst_interface/#The-Julia-to-Typst-Interface","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"This guide illustrates how to implement Typst formatting for custom types.","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Setup","page":"The Julia to Typst Interface","title":"Setup","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> import Base: show\n\njulia> import Typstry: TypstContext, show_typst\n\njulia> using Typstry","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Implementation","page":"The Julia to Typst Interface","title":"Implementation","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Consider this custom type.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> struct Reciprocal{N <: Number}\n           n::N\n       end","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Implement a show_typst method to specify its Typst formatting. Remember to Annotate values taken from untyped locations.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show_typst(io, tc, r::Reciprocal) =\n           if tc[:mode]::Mode == markup\n               print(io, \"#let reciprocal(n) = \\$1 / #n\\$\")\n           else\n               print(io, \"reciprocal(\")\n               show(io, MIME\"text/typst\"(), Typst(round(r.n; digits = tc[:digits]::Int)))\n               print(io, \")\")\n           end;","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Although custom formatting may be handled in show_typst with get(io, key, default), this may be repetitive when specifying defaults for multiple methods. There is also no way to tell if the value has been specified by the user or if it is a default. Instead, implement a custom context which overrides default, but not user specifications.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> TypstContext(::Reciprocal) = TypstContext(; digits = 2);","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Those two methods are a complete implementation of the Julia to Typst interface. The following method is optional, and provides show_typst with the context:","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show(io::IO, m::MIME\"text/typst\", r::Reciprocal) = show(io, m, Typst(r));","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Now, a Reciprocal is fully supported by Typstry.jl.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> r = Reciprocal(π);\n\njulia> println(TypstString(r))\n#let reciprocal(n) = $1 / #n$\n\njulia> println(TypstString(r; mode = math))\nreciprocal(3.14)\n\njulia> println(TypstString(r; mode = math, digits = 4))\nreciprocal(3.1416)","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Guidelines","page":"The Julia to Typst Interface","title":"Guidelines","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"While implementing the interface only requires two methods, it may be more challenging to determine how a Julia value should be represented in a Typst source file and its corresponding compiled document. Julia and Typst are distinct languages that differ in both syntax and semantics, so there may be multiple meaningful formats to choose from.","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Make-the-obvious-choice,-if-available","page":"The Julia to Typst Interface","title":"Make the obvious choice, if available","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"There is a clear correspondence between these Julia and Typst values","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> println(TypstString(1))\n$1$\n\njulia> println(TypstString(nothing))\n#none\n\njulia> println(TypstString(r\"[a-z]\"))\n#regex(\"[a-z]\")","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Choose-the-most-semantically-rich-representation","page":"The Julia to Typst Interface","title":"Choose the most semantically rich representation","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"This may vary across Modes and domains\nSome modes may not have a meaningful representation, and should be formatted into a mode that does\nBoth Julia and Typst support Unicode characters, except unknown variables in Typst's code mode","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> println(TypstString(π; mode = code))\n3.141592653589793\n\njulia> println(TypstString(π; mode = math))\nπ\n\njulia> println(TypstString(π; mode = markup))\n$π$","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Consider-both-the-Typst-source-text-and-compiled-document-formatting","page":"The Julia to Typst Interface","title":"Consider both the Typst source text and compiled document formatting","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"A Docs.Text is documented to \"render [its value] as plain text\", and therefore corresponds to text in a rendered Typst document\nA TypstString represents Typst source text, and is printed directly","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> println(TypstString(text\"[\\\"a\\\"]\"))\n#\"[\\\"a\\\"]\"\n\njulia> println(TypstString(typst\"[\\\"a\\\"]\"))\n[\"a\"]","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Try-to-generate-valid-Typst-source-text","page":"The Julia to Typst Interface","title":"Try to generate valid Typst source text","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"A TypstString represents Typst source text, which may be invalid\nA UnitRange{Int} is formatted differently for each Mode, but is always valid","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> println(TypstString(1:4; mode = code))\nrange(1, 5)\n\njulia> println(TypstString(1:4; mode = math))\nvec(\n  1, 2, 3, 4\n)\n\njulia> println(TypstString(1:4; mode = markup))\n$vec(\n  1, 2, 3, 4\n)$","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Test-for-edge-cases","page":"The Julia to Typst Interface","title":"Test for edge cases","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"1 / 2 may be ambiguous in code and math mode expressions\n$1 / 2$ is not ambiguous in markup mode","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> println(TypstString(1 // 2; mode = code))\n(1 / 2)\n\njulia> println(TypstString(1 // 2; mode = math))\n(1 / 2)\n\njulia> println(TypstString(1 // 2; mode = markup))\n$1 / 2$","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Format-values-in-containers-using-show-with-the-text/typst-MIME-type","page":"The Julia to Typst Interface","title":"Format values in containers using show with the text/typst MIME type","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Values may require their context\nThe AbstractVector method\nEncloses source text in dollar signs, so it changes its Mode to math\nFormats its elements with an indent, so it increments its depth","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> println(TypstString([true, Any[1, 1.2]]))\n$vec(\n  \"true\", vec(\n    1, 1.2\n  )\n)$","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Check-parametric-and-abstract-types","page":"The Julia to Typst Interface","title":"Check parametric and abstract types","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Related Julia types may not be representable in the same Typst format","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> println(TypstString(0:2:6; mode = code))\nrange(0, 7, step: 2)\n\njulia> println(TypstString(0:2.0:6; mode = code))\n(0.0, 2.0, 4.0, 6.0)","category":"page"},{"location":"references/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"references/utilities/","page":"Utilities","title":"Utilities","text":"Mode\ncode\nmarkup\nmath\nContextError\nTypstContext\ncontext\nset_context","category":"page"},{"location":"references/utilities/#Typstry.Mode","page":"Utilities","title":"Typstry.Mode","text":"Mode\n\nAn Enumerated type used to specify that the current Typst syntactical context is code, markup, or math.\n\nExamples\n\njulia> Mode\nEnum Mode:\ncode = 0\nmarkup = 1\nmath = 2\n\n\n\n\n\n","category":"type"},{"location":"references/utilities/#Typstry.code","page":"Utilities","title":"Typstry.code","text":"code\n\nA Typst syntactical Mode prefixed by the number sign.\n\nExamples\n\njulia> code\ncode::Mode = 0\n\n\n\n\n\n","category":"constant"},{"location":"references/utilities/#Typstry.markup","page":"Utilities","title":"Typstry.markup","text":"markup\n\nA Typst syntactical Mode at the top-level of source text and enclosed within square brackets.\n\njulia> markup\nmarkup::Mode = 1\n\n\n\n\n\n","category":"constant"},{"location":"references/utilities/#Typstry.math","page":"Utilities","title":"Typstry.math","text":"math\n\nA Typst syntactical Mode enclosed within dollar signs.\n\njulia> math\nmath::Mode = 2\n\n\n\n\n\n","category":"constant"},{"location":"references/utilities/#Typstry.ContextError","page":"Utilities","title":"Typstry.ContextError","text":"ContextError <: Exception\nContextError(::Type, ::Type, ::Symbol)\n\nAn Exception indicating that a context key returned a value of an incorrect type.\n\nInterface\n\nImplements the Exception interface.\n\nshowerror(::IO, ::ContextError)\nshow(::IO, ::MIME\"text/plain\", ::ContextError)\n\nExamples\n\njulia> ContextError(Mode, String, :mode)\nContextError(Mode, String, :mode)\n\n\n\n\n\n","category":"type"},{"location":"references/utilities/#Typstry.TypstContext","page":"Utilities","title":"Typstry.TypstContext","text":"TypstContext <: AbstractDict{Symbol, Any}\nTypstContext(::Any)\nTypstContext(; kwargs...)\n\nProvide formatting data for show_typst.\n\nImplement a method of this constructor for a custom type to specify its custom settings and parameters.\n\nCalls to show_typst from the following methods:\n\nTypstString\nrender\nshow_typst(::IO, ::TypstContext, x)\nshow with the application/pdf, image/png, image/svg+xml, and text/typst   MIME types and a TypstString, TypstText, and Typst value\n\nspecify the TypstContext by combining the following contexts:\n\nA default context\nThe context specified by set_context,  which is combined with the context upon initialization\nThe TypstContext constructor implemented for the given type,  the context specified in the call by keyword parameters,  a given TypstContext, or the IOContext key :typst_context,  depending on the calling method\nAny context specified by a recursive call in show_typst to format values,  such as elements from a container\n\nDuplicate keys are handled such that each successive context overwrites those of previous contexts, prioritized in order as listed. In other words, the default context has the lowest priority while recursive calls to show_typst have the highest priority.\n\nInterfaces\n\nThis type implements the dictionary and iteration interfaces. However, it is immutable such that it does not support inserting, deleting, or setting a key-value pair.\n\neltype(::TypstContext)\nget(::TypstContext, ::Symbol, default)\nget(::Union{Function, Type}, ::TypstContext, ::Symbol)\niterate(::TypstContext, state)\niterate(::TypstContext)\nlength(::TypstContext)\nshow(::IO, ::TypstContext)\n\n\n\n\n\n","category":"type"},{"location":"references/utilities/#Typstry.context","page":"Utilities","title":"Typstry.context","text":"context\n\nA constant TypstContext used default formatting data when calling show_typst.\n\nMay be configured using set_context.\n\nSetting Type Description\nbackticks Int The number of backticks to enclose raw text markup, which may be increased to disambiguiate nested raw text.\nblock Bool When mode = math, specifies whether the enclosing dollar signs are padded with a space to render the element inline or its own block.\ndepth Int The current level of nesting within container types to specify the degree of indentation by repeating the tab_size.\nmode Mode The current Typst syntactical context where code follows the number sign, markup is at the top-level and enclosed in square brackets, and math is enclosed in dollar signs.\nparenthesize Bool Whether to enclose some mathematical elements in parentheses to specify their operator precedence and avoid ambiguity.\npreamble TypstString Used at the beginning of Typst source files generated by render and some show methods.\ntab_size Int The number of spaces used by some elements with multi-line Typst formatting, which is repeated for each level of depth\n\nExamples\n\njulia> context\nTypstContext with 7 entries:\n  :mode         => markup\n  :parenthesize => true\n  :block        => false\n  :preamble     => TypstString(TypstText(\"#set page(margin: 1em, height: auto, …\n  :tab_size     => 2\n  :backticks    => 3\n  :depth        => 0\n\n\n\n\n\n","category":"constant"},{"location":"references/utilities/#Typstry.set_context","page":"Utilities","title":"Typstry.set_context","text":"set_context(::TypstContext)\nset_context()\n\nUse Preferences.jl such that after restarting Julia, the context is initialized to the given TypstContext merged with default settings.\n\nSpecifying a key contained in the default settings will override it. If a TypstContext is not provided, the context is reset to the default settings.\n\ntip: Tip\nUse this function to customize the default formatting in environments that display values using show with the application/pdf, image/png, and image/svg+xml MIME types.\n\n\n\n\n\n","category":"function"},{"location":"references/strings/#Strings","page":"Strings","title":"Strings","text":"","category":"section"},{"location":"references/strings/","page":"Strings","title":"Strings","text":"This reference documents formatting Julia values into Typst source text.","category":"page"},{"location":"references/strings/","page":"Strings","title":"Strings","text":"TypstString\nTypstText\nTypst\n@typst_str\nshow_typst\nshow_typst(::Any, ::Any, ::TypstString)\nshow_typst(::Any, ::Any, ::TypstText)\nshow_typst(::Any, ::Any, ::Typst)","category":"page"},{"location":"references/strings/#Typstry.TypstString","page":"Strings","title":"Typstry.TypstString","text":"TypstString <: AbstractString\nTypstString(::TypstContext, ::Any)\nTypstString(::Any; context...)\n\nFormat the value as a Typst formatted string.\n\nThe TypstContext is combined with additional context and passed to show_typst.\n\nInterface\n\nThis type implements the String interface. However, the interface is undocumented, which may result in unexpected behavior.\n\nIOBuffer(::TypstString)\ncodeunit(::TypstString, ::Integer)\ncodeunit(::TypstString)\nisvalid(::TypstString, ::Integer)\niterate(::TypstString, ::Integer)\niterate(::TypstString)\nncodeunits(::TypstString)\npointer(::TypstString)\nrepr(::MIME, ::TypstString)\nThis method patches incorrect output from the assumption in repr that   the parameter is already in the requested MIME type when the MIME   type satisfies istextmime and the parameter is an AbstractString.\nshow_typst(::IO, ::TypstContext, ::TypstString)\nshow(::IO, ::MIME\"text/typst\", ::TypstString)\nAccepts a IOContext(::IO, :typst_context => ::TypstContext)\nshow(::IO, ::Union{MIME\"application/pdf\", MIME\"image/png\", MIME\"image/svg+xml\"}, ::TypstString)\nAccepts a IOContext(::IO, :typst_context => ::TypstContext)\nSupports the julia_mono typeface\nThe generated Typst source text contains the context's preamble and the formatted value\nshow(::IO, ::TypstString)\nPrints in @typst_str format if each character satisfies isprint.   Otherwise, print in TypstString format.\n\nExamples\n\njulia> TypstString(1)\ntypst\"$1$\"\n\njulia> TypstString(TypstContext(; mode = code), π)\ntypst\"3.141592653589793\"\n\njulia> TypstString(1 + 2im; mode = math)\ntypst\"(1 + 2i)\"\n\n\n\n\n\n","category":"type"},{"location":"references/strings/#Typstry.TypstText","page":"Strings","title":"Typstry.TypstText","text":"TypstText{T}\nTypstText(::Any)\n\nA wrapper whose show_typst method uses print on the wrapped value.\n\nInterface\n\nshow_typst(::IO, ::TypstContext, ::TypstText)\nshow(::IO, ::MIME\"text/typst\", ::TypstText)\nAccepts IOContext(::IO, :typst_context => ::TypstContext)\nshow(::IO, ::Union{MIME\"application/pdf\", MIME\"image/png\", MIME\"image/svg+xml\"}, ::TypstText)\nAccepts IOContext(::IO, :typst_context => ::TypstContext)\nSupports the julia_mono typeface\nThe generated Typst source text contains the context's preamble and the formatted value\nshow(::IO, ::TypstText)\n\nExamples\n\njulia> TypstText(1)\nTypstText(1)\n\njulia> TypstText(\"a\")\nTypstText(\"a\")\n\n\n\n\n\n","category":"type"},{"location":"references/strings/#Typstry.Typst","page":"Strings","title":"Typstry.Typst","text":"Typst{T}\nTypst(::T)\n\nA wrapper used to pass values to show_typst.\n\nInterface\n\nshow_typst(::IO, ::TypstContext, ::Typst)\nshow(::IO, ::Union{MIME\"application/pdf\", MIME\"image/png\", MIME\"image/svg+xml\", MIME\"text/typst\"}, ::Typst)\nAccepts a IOContext(::IO, :typst_context => ::TypstContext)\nSupports the julia_mono typeface\nThe generated Typst source text contains the context's preamble and the formatted value\nshow(::IO, ::Typst)\n\nExamples\n\njulia> Typst(1)\nTypst(1)\n\njulia> Typst(\"a\")\nTypst(\"a\")\n\n\n\n\n\n","category":"type"},{"location":"references/strings/#Typstry.@typst_str","page":"Strings","title":"Typstry.@typst_str","text":"@typst_str(\"s\")\ntypst\"s\"\n\nConstruct a TypstString.\n\nControl characters are escaped, except double quotation marks and backslashes in the same manner as @raw_str. Values may be interpolated by calling the TypstString constructor, except using a backslash instead of the type name. Interpolation syntax may be escaped in the same manner as quotation marks.\n\ntip: Tip\nPrint directly to an IO using show(::IO, ::MIME\"text/typst\", ::Typst).See also the performance tip to Avoid string interpolation for I/O.\n\nExamples\n\njulia> x = 1;\n\njulia> typst\"$ \\(x; mode = math) / \\(x + 1; mode = math) $\"\ntypst\"$ 1 / 2 $\"\n\njulia> typst\"\\(x//2)\"\ntypst\"$1 / 2$\"\n\njulia> typst\"\\(x // 2; mode = math)\"\ntypst\"(1 / 2)\"\n\njulia> typst\"\\\\(x)\"\ntypst\"\\\\(x)\"\n\n\n\n\n\n","category":"macro"},{"location":"references/strings/#Typstry.show_typst","page":"Strings","title":"Typstry.show_typst","text":"show_typst(::IO = stdout, ::TypstContext, x)\nshow_typst(::TypstContext = TypstContext(), x)\n\nPrint in Typst format with Julia settings and Typst parameters provided by the TypstContext.\n\nImplement the three-parameter form of this function for a custom type to specify its Typst formatting. A setting is a value used in Julia, whose type varies across settings. A parameter is passed directly to a Typst function and must be a TypstString with the same name as in Typst, except that dashes are replaced with underscores. Settings each have a default value specified by context, whereas the default values of parameters are handled in Typst functions. Some settings, such as block, correspond with a parameter but may also be used in Julia.\n\ntip: Tip\nPlease create an issue or pull-request to implement new methods.\n\nType Settings Parameters\nAbstractArray :block, :depth, :mode, :tab_size :delim, :gap\nAbstractChar  \nAbstractFloat :mode \nAbstractMatrix :block, :depth, :mode, :tab_size :augment, :column_gap, :delim, :gap, :row_gap\nAbstractString  \nBool :mode \nComplex{Bool} :block, :mode, :parenthesize \nComplex :block, :mode, :parenthesize \nIrrational :mode \nNothing :mode \nOrdinalRange{<:Integer, <:Integer} :mode \nRational :block, :mode, :parenthesize \nRegex :mode \nSigned :mode \nStepRangeLen{<:Integer, <:Integer, <:Integer} :mode \nTuple :block, :depth, :mode, :tab_size :delim, :gap\nTypst  \nTypstString  \nTypstText  \nUnsigned :mode \nVersionNumber :mode \nDocs.HTML :block, :depth, :mode, :tab_size \nDocs.Text :mode \nDates.Date :mode, :indent \nDates.DateTime :mode, :indent \nDates.Period :mode, :indent \nDates.Time :mode, :indent \n\n\n\n\n\n","category":"function"},{"location":"references/strings/#Typstry.show_typst-Tuple{Any, Any, TypstString}","page":"Strings","title":"Typstry.show_typst","text":"show_typst(::IO, ::TypstContext, ::TypstString)\n\n\n\n\n\n","category":"method"},{"location":"references/strings/#Typstry.show_typst-Tuple{Any, Any, TypstText}","page":"Strings","title":"Typstry.show_typst","text":"show_typst(::IO, ::TypstContext, ::TypstText)\n\nCall print the value wrapped in TypstText.\n\nSee also TypstContext.\n\n\n\n\n\n","category":"method"},{"location":"references/strings/#Typstry.show_typst-Tuple{Any, Any, Typst}","page":"Strings","title":"Typstry.show_typst","text":"show_typst(::IO, ::TypstContext, ::Typst)\n\nCall show_typst on the value wrapped in Typst.\n\nSee also TypstContext.\n\n\n\n\n\n","category":"method"},{"location":"references/package_extensions/#Package-Extensions","page":"Package Extensions","title":"Package Extensions","text":"","category":"section"},{"location":"references/package_extensions/","page":"Package Extensions","title":"Package Extensions","text":"This reference documents the lazily-loaded implementations of show_typst for types defined in external packages.","category":"page"},{"location":"references/package_extensions/#LaTeXStrings.jl","page":"Package Extensions","title":"LaTeXStrings.jl","text":"","category":"section"},{"location":"references/package_extensions/","page":"Package Extensions","title":"Package Extensions","text":"show_typst(::Any, ::Any, ::LaTeXStrings.LaTeXString)","category":"page"},{"location":"references/package_extensions/#Typstry.show_typst-Tuple{Any, Any, LaTeXString}","page":"Package Extensions","title":"Typstry.show_typst","text":"show_typst(::IO, ::TypstContext, ::LaTeXString)\n\nPrint a raw text block in Typst format.\n\nSee also TypstContext.\n\nType Settings Parameters\nLaTeXString :block, :depth, :mode, :tab_size \n\n\n\n\n\n","category":"method"},{"location":"references/package_extensions/#Markdown.jl","page":"Package Extensions","title":"Markdown.jl","text":"","category":"section"},{"location":"references/package_extensions/","page":"Package Extensions","title":"Package Extensions","text":"show_typst(::Any, ::Any, ::Markdown.MD)","category":"page"},{"location":"references/package_extensions/#Typstry.show_typst-Tuple{Any, Any, MD}","page":"Package Extensions","title":"Typstry.show_typst","text":"show_typst(::IO, ::TypstContext, ::Markdown.MD)\n\nPrint a raw text block in Typst format.\n\nSee also TypstContext.\n\nType Settings Parameters\nMarkdown.MD :block, :depth, :mode, :tab_size \n\n\n\n\n\n","category":"method"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"DocTestSetup = :(using Typstry)","category":"page"},{"location":"tutorials/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"This tutorial demonstrates the basic features of Typstry.jl and how to use them.","category":"page"},{"location":"tutorials/getting_started/#Strings","page":"Getting Started","title":"Strings","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Print Julia values in Typst format using show with the text/typst MIME type. This formatting is also used to construct a TypstString.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> show(stdout, \"text/typst\", Typst(π))\n$π$\n\njulia> TypstString(π)\ntypst\"$π$\"","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Formatting may be configured in show using an IOContext and in TypstString using keyword parameters.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> show(IOContext(stdout, :typst_context => TypstContext(; mode = code)), \"text/typst\", Typst(π))\n3.141592653589793\n\njulia> TypstString(π; mode = code)\ntypst\"3.141592653589793\"","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Use @typst_str to directly write Typst source text. This also supports formatted interpolation by calling the TypstString constructor.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> typst\"$ \\(pi; mode = math) approx \\(pi; mode = code) $\"\ntypst\"$ π approx 3.141592653589793 $\"","category":"page"},{"location":"tutorials/getting_started/#Commands","page":"Getting Started","title":"Commands","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Use the Typst command-line interface by running a TypstCommand created with its constructor or @typst_cmd.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> TypstCommand([\"help\"])\ntypst`help`\n\njulia> typst`compile input.typ output.pdf`\ntypst`compile input.typ output.pdf`","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Easily generate a Typst source file and compile it into a document using render.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> render(Any[true 1; 1.2 1 // 2]);","category":"page"},{"location":"references/commands/#Commands","page":"Commands","title":"Commands","text":"","category":"section"},{"location":"references/commands/","page":"Commands","title":"Commands","text":"This reference documents how to interact with the Typst compiler.","category":"page"},{"location":"references/commands/","page":"Commands","title":"Commands","text":"TypstCommandError\nTypstCommand\n@typst_cmd\njulia_mono\nrender\ntypst","category":"page"},{"location":"references/commands/#Typstry.TypstCommandError","page":"Commands","title":"Typstry.TypstCommandError","text":"TypstCommandError <: Exception\nTypstCommandError(::TypstCommand)\n\nAn Exception indicating a Typst compiler error from a TypstCommand.\n\nInterface\n\nImplements the Exception interface.\n\nshowerror(::IO, ::TypstCommandError)\nshow(::IO, ::MIME\"text/plain\", ::TypstCommandError)\n\nExamples\n\njulia> TypstCommandError(typst``)\nTypstCommandError(typst``)\n\n\n\n\n\n","category":"type"},{"location":"references/commands/#Typstry.TypstCommand","page":"Commands","title":"Typstry.TypstCommand","text":"TypstCommand(::AbstractVector{<:AbstractString})\nTypstCommand(::TypstCommand; kwargs...)\n\nThe Typst compiler and its parameters.\n\nKeyword parameters have the same semantics as for a Cmd.\n\nInterface\n\nThis type implements the Cmd interface. However, the interface is undocumented, which may result in unexpected behavior.\n\naddenv(::TypstCommand, env...; ::Bool = true)\nCan be used with julia_mono\ndetach(::TypstCommand)\neltype(::Type{TypstCommand})\nfirstindex(::TypstCommand)\ngetindex(::TypstCommand, i)\nhash(::TypstCommand, ::UInt)\nignorestatus(::TypstCommand)\nDo not throw a TypstCommandError if the Typst compiler throws an error.   Errors thrown by the Typst compiler are printed to stderr regardless.\niterate(::TypstCommand, i)\niterate(::TypstCommand)\nkeys(::TypstCommand)\nlastindex(::TypstCommand)\nlength(::TypstCommand)\nrun(::TypstCommand, args...; ::Bool = true)\nErrors thrown by the Typst compiler will be printed to stderr.   Then, a Julia TypstCommandError will be   thrown unless the ignorestatus flag is set.\nsetcpuaffinity(::TypstCommand, cpus)\nsetenv(::TypstString, env...; kwargs...)\nCan be used with julia_mono\nshow(::IO, ::MIME\"text/plain\", ::TypstCommand)\n\nExamples\n\njulia> help = TypstCommand([\"help\"])\ntypst`help`\n\njulia> TypstCommand(help; ignorestatus = true)\ntypst`help`\n\n\n\n\n\n","category":"type"},{"location":"references/commands/#Typstry.@typst_cmd","page":"Commands","title":"Typstry.@typst_cmd","text":"@typst_cmd(\"s\")\ntypst`s`\n\nConstruct a TypstCommand where each parameter is separated by a space.\n\nThis does not support interpolation; use the constructor instead.\n\nExamples\n\njulia> typst`help`\ntypst`help`\n\njulia> typst`compile input.typ output.typ`\ntypst`compile input.typ output.typ`\n\n\n\n\n\n","category":"macro"},{"location":"references/commands/#Typstry.julia_mono","page":"Commands","title":"Typstry.julia_mono","text":"julia_mono\n\nA constant String file path to the JuliaMono typeface.\n\nThis typeface is available when using one of the following approaches:\n\nTypstCommand([\"compile\", \"input.typ\", \"output.pdf\", \"--font-path=\" * julia_mono)\naddenv(::TypstCommand, \"TYPST_FONT_PATHS\" => julia_mono)\nsetenv(::TypstCommand, \"TYPST_FONT_PATHS\" => julia_mono)\nENV[\"TYPST_FONT_PATHS\"] = julia_mono\n\nand when compiling documents with the following methods:\n\nrender\ntypst\nshow with the application/pdf, image/png, and image/svg+xml   MIME types and a TypstString, TypstText, and Typst value\n\nSee also TypstCommand.\n\n\n\n\n\n","category":"constant"},{"location":"references/commands/#Typstry.render","page":"Commands","title":"Typstry.render","text":"render(value;\n    input = \"input.typ\",\n    output = \"output.pdf\",\n    open = true,\n    ignorestatus = true,\n    context = TypstContext()\n)\n\nRender the value to a document.\n\nThis first generates the input file containing the preamble and formatted value. Then it is compiled to the output document, whose format is inferred by its file extension to be pdf, png, or svg. The document may be automatically opened by the default viewer. The ignorestatus flag may be set. This supports using the julia_mono typeface.\n\nSee also TypstContext.\n\nExamples\n\njulia> render(Any[true 1; 1.2 1 // 2]);\n\n\n\n\n\n","category":"function"},{"location":"references/commands/#Typstry.typst","page":"Commands","title":"Typstry.typst","text":"typst(::AbstractString; catch_interrupt = true, ignorestatus = true)\n\nConvenience function intended for interactive use, emulating the typst command line interface. Be aware, however, that it strictly splits on spaces and does not provide any shell-style escape mechanism, so it will not work if there are, e.g., filenames with spaces.\n\nWhen catch_interrupt is true, CTRL-C quietly quits the command. When ignorestatus is true, a Typst failure will not imply a julia error.\n\nIf the \"TYPST_FONT_PATHS\" environment variable is not set, it is temporarily set to julia_mono.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"DocTestSetup = :(using Typstry)","category":"page"},{"location":"#Typstry.jl","page":"Typstry.jl","title":"Typstry.jl","text":"","category":"section"},{"location":"#Introduction","page":"Typstry.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Typstry.jl is the interface to convert the computational power of Julia into beautifully formatted Typst documents.","category":"page"},{"location":"#What-is-Typst?","page":"Typstry.jl","title":"What is Typst?","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Typst is an open-source and relatively new typesetting system (written in Rust 🦀🚀), designed to improve upon the performance and usability of LaTeX. See also the Typst repository and documentation for examples and how to get started.","category":"page"},{"location":"#Installation","page":"Typstry.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"julia> using Pkg: add\n\njulia> add(\"Typstry\")\n\njulia> using Typstry","category":"page"},{"location":"#Showcase","page":"Typstry.jl","title":"Showcase","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"julia> show(stdout, \"text/typst\", Typst([true 1; 1.0 [Any[true 1; 1.0 nothing]]]))\n$mat(\n  \"true\", 1;\n  1.0, mat(\n    \"true\", 1;\n    1.0, #none\n  )\n)$\n\njulia> TypstString(1 // 2; block = true)\ntypst\"$ 1 / 2 $\"\n\njulia> typst\"$ \\(1 + 2im; mode = math) $\"\ntypst\"$ (1 + 2i) $\"\n\njulia> TypstCommand([\"help\"])\ntypst`help`\n\njulia> typst`compile input.typ output.pdf`\ntypst`compile input.typ output.pdf`\n\njulia> render(1:4);","category":"page"},{"location":"#Features","page":"Typstry.jl","title":"Features","text":"","category":"section"},{"location":"#Strings","page":"Typstry.jl","title":"Strings","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Print Julia values in Typst format\nSpecify Julia settings and Typst parameters\nImplement formatting for custom types\nConstruct Typst strings\nInterpolate formatted values","category":"page"},{"location":"#Commands","page":"Typstry.jl","title":"Commands","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Construct Typst commands\nRender documents using the Typst compiler\nDisplay in IJulia.jl, Pluto.jl, and QuartoRunner.jl notebooks\nUse the JuliaMono typeface","category":"page"},{"location":"#Planned","page":"Typstry.jl","title":"Planned","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Seperate the choice of Typst representation from the mode\nDefault auto::Mode?\nAutomatically determine the Typst syntactic context\nUse a tree-sitter grammar or jll package\nImplement Typst formatting for more types\nBase\nAbstractDict\nAbstractIrrational\nAbstractSet\nEnum\nMode\nExpr\nSymbol\nPackage extensions\nStandard Library\nLinearAlgebra.jl\nDataFrames.jl\nPartial Julia to Typst transpilation\n@typst(a * b) ==\nTypstString(:(a * b)) ==\nTypstString(TypstFunction(*, :a, :b)) ==\ntypst\"$ a b $\"","category":"page"},{"location":"#Similar-Packages","page":"Typstry.jl","title":"Similar Packages","text":"","category":"section"},{"location":"#Typst","page":"Typstry.jl","title":"Typst","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Labelyst.jl\nTypstGenerator.jl\nTypstJlyFish.jl\nInteroperable with Typstry.jl\nTypst_jll.jl\nDependency of Typstry.jl","category":"page"},{"location":"#Typst-and-LaTeX","page":"Typstry.jl","title":"Typst and LaTeX","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"MakieTeX.jl\nDependent of Typstry.jl\nSummaryTables.jl","category":"page"},{"location":"#LaTeX","page":"Typstry.jl","title":"LaTeX","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Latexify.jl\nLaTeXCompilers.jl\nLaTeXEntities.jl\nLaTeXStrings.jl\nLaTeXTabulars.jl\nLatexPrint.jl\nLibTeXPrintf.jl\nMathJaxRenderer.jl\nMathTeXEngine.jl\ntectonic_jll.jl","category":"page"},{"location":"guides/typst_formatting_examples/#Typst-Formatting-Examples","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"","category":"section"},{"location":"guides/typst_formatting_examples/","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"This guide illustrates Typst formatting for supported types.","category":"page"},{"location":"guides/typst_formatting_examples/","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"These Typst documents were generated from Julia using show with the text/typst MIME type and compiled using a TypstCommand. Each row corresponds to a method of show_typst. The Typst columns contain the code, markup, and math syntactical Modes. Each mode contains two columns, where the first is the Typst source text and the second is how that text is rendered in a compiled document. Sequential documents correspond to Package Extensions.","category":"page"},{"location":"guides/typst_formatting_examples/","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"tip: Tip\nOpen these images in a new tab or another viewer.","category":"page"},{"location":"guides/typst_formatting_examples/","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"(Image: Typstry.jl examples) (Image: LaTeXStrings.jl examples) (Image: Markdown.jl examples)","category":"page"}]
}
