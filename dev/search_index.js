var documenterSearchIndex = {"docs":
[{"location":"manual/","page":"Manual","title":"Manual","text":"Modules = [Typstry]","category":"page"},{"location":"manual/#Typstry.compile","page":"Manual","title":"Typstry.compile","text":"compile(input, [output]; pre_options = (), post_options = ())\n\nEquivalent to typst(compile, input, output; pre_options, post_options). ```\n\n\n\n\n\n","category":"function"},{"location":"manual/#Typstry.fonts-Tuple{}","page":"Manual","title":"Typstry.fonts","text":"fonts(; pre_options = (), post_options = ())\n\nEquivalent to typst(fonts; pre_options, post_options).\n\n\n\n\n\n","category":"method"},{"location":"manual/#Typstry.help-Tuple{}","page":"Manual","title":"Typstry.help","text":"help([command::Function])\n\nPrints the help message for typst or the given command.\n\nEquivalent to typst(help, command).\n\nExamples\n\njulia> help();\ntypst creates PDF files from .typ files\n\nUsage: typst [OPTIONS] <COMMAND>\n\nCommands:\n  compile  Compiles the input file into a PDF file [aliases: c]\n  watch    Watches the input file and recompiles on changes [aliases: w]\n  fonts    List all discovered fonts in system and custom font paths\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --font-path <DIR>  Add additional directories to search for fonts [env: TYPST_FONT_PATHS=]\n      --root <DIR>       Configure the root for absolute paths [env: TYPST_ROOT=]\n  -v, --verbosity...     Sets the level of verbosity: 0 = none, 1 = warning & error, 2 = info, 3 = debug, 4 = trace\n  -h, --help             Print help\n  -V, --version          Print version\n\njulia> help(fonts);\nList all discovered fonts in system and custom font paths\n\nUsage: typst fonts [OPTIONS]\n\nOptions:\n      --variants  Also list style variants of each font family\n  -h, --help      Print help\n\n\n\n\n\n","category":"method"},{"location":"manual/#Typstry.typst-Tuple","page":"Manual","title":"Typstry.typst","text":"typst(args...)\n\nCall the typst command-line interface with the given arguments via Typst_jll.jl.\n\nEquivalent to $ typst args... in the shell.\n\n\n\n\n\n","category":"method"},{"location":"manual/#Typstry.typst-Tuple{Function, Vararg{Any}}","page":"Manual","title":"Typstry.typst","text":"typst(command::Function, args...; pre_options = (), post_options = ())\n\nEquivalent to typst(pre_options..., string(command), post_options..., args...).\n\n\n\n\n\n","category":"method"},{"location":"manual/#Typstry.watch","page":"Manual","title":"Typstry.watch","text":"watch(input, [output]; pre_options = (), post_options = ())\n\nEquivalent to typst(watch, input, output; pre_options, post_options).\n\n\n\n\n\n","category":"function"},{"location":"manual/#Typstry.@t_str-Tuple{Any}","page":"Manual","title":"Typstry.@t_str","text":"t_str(s)\n\nConstruct a string with custom interpolation and without unescaping (except for quotation marks, \", which still have to be escaped).\n\nThe $ symbol cannot be used to interpolate Julia values, because Typst uses that symbol to start and end a math mode block. Instead, use $$ with the same semantics.\n\nExamples\n\njulia> x = 1;\n\njulia> t\"$1 / x$\" # math mode\n\"\\$1 / x\\$\"\n\njulia> t\"$$x $$(x + 1)\" # interpolation\n\"1 2\"\n\njulia> t\"\\$$x\" # escaping\n\"\\$\\$x\"\n\n\n\n\n\n","category":"macro"},{"location":"#Typstry.jl","page":"Home","title":"Typstry.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package to access the Typst command-line interface.","category":"page"},{"location":"#Showcase","page":"Home","title":"Showcase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add(url = \"https://github.com/jakobjpeters/Typstry.jl\")\n\njulia> using Typstry\n\njulia> file_name = \"example.typ\"\n\njulia> write(file_name, \"Typst is cool\")\n\njulia> compile(file_name)","category":"page"},{"location":"#Planned-features","page":"Home","title":"Planned features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Convert Julia values to Typst strings\nExplore rendering\nUnicode in the REPL?\nOther environments?","category":"page"},{"location":"#Related-Projects","page":"Home","title":"Related Projects","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TypstGenerator.jl","category":"page"}]
}
