var documenterSearchIndex = {"docs":
[{"location":"manual/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"manual/internals/#Strings","page":"Internals","title":"Strings","text":"","category":"section"},{"location":"manual/internals/","page":"Internals","title":"Internals","text":"Typstry.enclose","category":"page"},{"location":"manual/internals/#Typstry.enclose","page":"Internals","title":"Typstry.enclose","text":"enclose(x, left, right = reverse(left))\n\nReturn left * x * right.\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Strings","page":"Strings","title":"Strings","text":"","category":"section"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"TypstString\nMode\n@typst_str\ntypstify","category":"page"},{"location":"manual/strings/#Typstry.TypstString","page":"Strings","title":"Typstry.TypstString","text":"TypstString <: AbstractString\nTypstString(x)\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Typstry.Mode","page":"Strings","title":"Typstry.Mode","text":"Mode\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Typstry.@typst_str","page":"Strings","title":"Typstry.@typst_str","text":"@typst_str(s)\ntypst\"s\"\n\nConstruct a string with custom interpolation and without unescaping. Backslashes (\\) and quotation marks (\") must still be escaped.\n\nThe syntax for interpolation is a backslash \\, followed by the Mode to typstify the interpolated value, and finally a Julia expression enclosed in parentheses (x). The syntax typst\"\\(x)\" is equivalent to typst\"\\markup(x)\".\n\nwarning: Warning\nSee also the performance tip to avoid string interpolation for I/O.\n\nExamples\n\njulia> x = 1;\n\njulia> typst\"$1 / x$\"\ntypst\"\\$1 / x\\$\"\n\njulia> typst\"\\(x) \\(x + 1)\"\ntypst\"1 2\"\n\njulia> typst\"\\\\(x)\"\ntypst\"\\\\\\\\(x)\"\n\njulia> typst\"\\ \\\\\"\ntypst\"\\\\ \\\\\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/strings/#Typstry.typstify","page":"Strings","title":"Typstry.typstify","text":"typstify(x, mode = markup)\n\nSee also Mode.\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Interface","page":"Strings","title":"Interface","text":"","category":"section"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"IOBuffer\ncodeunit\nisvalid\niterate\nncodeunits\npointer\nshow(::IO, ::TypstString)","category":"page"},{"location":"manual/strings/#Base.IOBuffer","page":"Strings","title":"Base.IOBuffer","text":"IOBuffer(::TypstString)\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Base.codeunit","page":"Strings","title":"Base.codeunit","text":"codeunit(::TypstString)\n\n\n\n\n\ncodeunit(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.isvalid","page":"Strings","title":"Base.isvalid","text":"isvalid(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.iterate","page":"Strings","title":"Base.iterate","text":"iterate(::TypstString)\n\n\n\n\n\niterate(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.ncodeunits","page":"Strings","title":"Base.ncodeunits","text":"ncodeunits(::TypstString)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.pointer","page":"Strings","title":"Base.pointer","text":"pointer(::TypstString)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.show-Tuple{IO, TypstString}","page":"Strings","title":"Base.show","text":"show(::IO, ::TypstString)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using Typstry)","category":"page"},{"location":"#Typstry.jl","page":"Home","title":"Typstry.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package to access the Typst command-line interface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also their website, documentation, and repository.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Write Typst strings\nRun Typst commands\nConstruct and render documents","category":"page"},{"location":"#Planned","page":"Home","title":"Planned","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Convert Julia values to Typst strings\nExplore rendering\nUnicode in the REPL?\nOther environments?","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg: add\n\njulia> add(url = \"https://github.com/jakobjpeters/Typstry.jl\")\n\njulia> using Typstry","category":"page"},{"location":"#Showcase","page":"Home","title":"Showcase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> typst\"\\(1 // 2)\"\ntypst\"\\$1 / 2\\$\"","category":"page"},{"location":"#Related-Packages","page":"Home","title":"Related Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TypstGenerator.jl\nLatexify.jl\nLaTeXStrings.jl\nLatexPrint.jl","category":"page"},{"location":"manual/commands/#Command","page":"Commands","title":"Command","text":"","category":"section"},{"location":"manual/commands/","page":"Commands","title":"Commands","text":"TypstCommand\n@typst_cmd\nrender","category":"page"},{"location":"manual/commands/#Typstry.TypstCommand","page":"Commands","title":"Typstry.TypstCommand","text":"TypstCommand\nTypstCommand(::Vector{String})\nTypstCommand(::TypstCommand; kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"manual/commands/#Typstry.@typst_cmd","page":"Commands","title":"Typstry.@typst_cmd","text":"@typst_cmd(parameters)\ntypst`parameters...`\n\nReturn a TypstCommand.\n\nExamples\n\njulia> typst`help`\ntypst`help`\n\njulia> typst`compile input.typ output.typ`\ntypst`compile input.typ output.typ`\n\n\n\n\n\n","category":"macro"},{"location":"manual/commands/#Typstry.render","page":"Commands","title":"Typstry.render","text":"render(elements...;\n    delimeter = \"\", input = \"input.typ\", output = \"output.pdf\", open = true\n)\n\nRender the elements, each separated by the delimeter, to a document.\n\nThis function generates two files. The first is the input, which contains the Typst code. The second is the output, which is rendered from the input using Typst's compile command.\n\nThe document format is inferred by the file extension of output. The available formats are pdf, png, and svg.\n\nIf open = true, theoutput` will be opened using the default viewer.\n\nExamples\n\njulia> render(typst\"$x ^ 2$\");\n\njulia> render([1 2; 3 4]);\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Interface","page":"Commands","title":"Interface","text":"","category":"section"},{"location":"manual/commands/","page":"Commands","title":"Commands","text":"show(::IO, ::TypstCommand)\nrun\naddenv\nsetenv\nignorestatus\ndetach\nsetcpuaffinity","category":"page"},{"location":"manual/commands/#Base.show-Tuple{IO, TypstCommand}","page":"Commands","title":"Base.show","text":"show(::IO, ::TypstCommand)\n\n\n\n\n\n","category":"method"},{"location":"manual/commands/#Base.run","page":"Commands","title":"Base.run","text":"run(::TypstCommand, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.addenv","page":"Commands","title":"Base.addenv","text":"addenv(::TypstCommand, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.setenv","page":"Commands","title":"Base.setenv","text":"setenv(::TypstCommand, env; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.ignorestatus","page":"Commands","title":"Base.ignorestatus","text":"ignorestatus(::TypstCommand)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.detach","page":"Commands","title":"Base.detach","text":"detach(::TypstCommand)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.setcpuaffinity","page":"Commands","title":"Base.setcpuaffinity","text":"setcpuaffinity(::TypstCommand, cpus)\n\n\n\n\n\n","category":"function"}]
}
