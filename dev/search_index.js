var documenterSearchIndex = {"docs":
[{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Interface","page":"Manual","title":"Interface","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"@typst_str\n@typst_cmd\ntypst\nrender","category":"page"},{"location":"manual/#Typstry.@typst_str","page":"Manual","title":"Typstry.@typst_str","text":"@typst_str(s)\n\nConstruct a string with custom interpolation and without unescaping. Backslashes (\\) and quotation marks (\") must still be escaped.\n\nUse $$ to interpolate values. The $ symbol is not used because Typst uses that symbol to start and end a math mode block.\n\nExamples\n\njulia> x = 1;\n\njulia> typst\"$1 / x$\"\n\"\\$1 / x\\$\"\n\njulia> typst\"$$x $$(x + 1)\"\n\"1 2\"\n\njulia> typst\"\\$$x\"\n\"\\$\\$x\"\n\njulia> typst\"\\\\\"\n\"\\\\\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/#Typstry.@typst_cmd","page":"Manual","title":"Typstry.@typst_cmd","text":"@typst_cmd(s)\n\nReturn a Cmd such that run(typst`$s`) is equivalent to shell> typst $s.\n\nnote: Note\nThis macro does not yet support interpolation.\n\nExamples\n\njulia> run(typst`help`);\nThe Typst compiler\n\nUsage: typst [OPTIONS] <COMMAND>\n\nCommands:\n  compile  Compiles an input file into a supported output format [aliases: c]\n  watch    Watches an input file and recompiles on changes [aliases: w]\n  query    Processes an input file to extract provided metadata\n  fonts    Lists all discovered fonts in system and custom font paths\n  update   Self update the Typst CLI (disabled)\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n  -v, --verbosity...  Sets the level of logging verbosity: -v = warning & error, -vv = info, -vvv = debug, -vvvv = trace\n      --cert <CERT>   Path to a custom CA certificate to use when making network requests [env: TYPST_CERT=]\n  -h, --help          Print help\n  -V, --version       Print version\n\njulia> write(\"input.typ\", typst\"$x ^ 2$\");\n\njulia> run(typst`compile input.typ output.pdf`);\n\n\n\n\n\n","category":"macro"},{"location":"manual/#Typstry.typst","page":"Manual","title":"Typstry.typst","text":"typst(s)\n\nEquivalent to shell> typst $s.\n\nExamples\n\njulia> typst(\"help\");\nThe Typst compiler\n\nUsage: typst [OPTIONS] <COMMAND>\n\nCommands:\n  compile  Compiles an input file into a supported output format [aliases: c]\n  watch    Watches an input file and recompiles on changes [aliases: w]\n  query    Processes an input file to extract provided metadata\n  fonts    Lists all discovered fonts in system and custom font paths\n  update   Self update the Typst CLI (disabled)\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n  -v, --verbosity...  Sets the level of logging verbosity: -v = warning & error, -vv = info, -vvv = debug, -vvvv = trace\n      --cert <CERT>   Path to a custom CA certificate to use when making network requests [env: TYPST_CERT=]\n  -h, --help          Print help\n  -V, --version       Print version\n\njulia> write(\"input.typ\", typst\"$x ^ 2$\");\n\njulia> typst(\"compile input.typ output.pdf\");\n\n\n\n\n\ntypst(xs...)\n\nEquivalent to typst(join(xs, \" \")).\n\nExamples\n\njulia> write(\"input.typ\", typst\"$x ^ 2$\");\n\njulia> typst(\"compile\", \"input.typ\", \"output.pdf\");\n\n\n\n\n\n","category":"function"},{"location":"manual/#Typstry.render","page":"Manual","title":"Typstry.render","text":"render(::String; input = \"input.typ\", output = \"output.pdf\", open = true)\n\nRender the given string to a document.\n\nThis function generates two files. The first is the input, which contains the Typst document. The second is the output, which is rendered from the input using Typst's compile function.\n\nThe document format is inferred by the file extension of output. The available formats are pdf, png, and svg.\n\nIf open, output will be opened using the default viewer.\n\nnote: Note\nThis is designed to generate a document with little effort. For more advanced useage, see typst.\n\nExamples\n\njulia> render(typst\"$x ^ 2$\");\n\njulia> render([1, 2, 3, 4]);\n\n\n\n\n\nrender(elements...; delimeter = \" \\\\n\", kwargs...)\n\nEquivalent to render(join(xs, delimeter; kwargs...)).\n\nExamples\n\njulia> render(\"The area of a circle is\", typst\"$A = pi dot r ^ 2$\"; delimeter = \" \");\n\n\n\n\n\n","category":"function"},{"location":"manual/#Internals","page":"Manual","title":"Internals","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Typstry.interpolate\nTypstry.typst_cmd","category":"page"},{"location":"manual/#Typstry.interpolate","page":"Manual","title":"Typstry.interpolate","text":"interpolate(xs, s, start, stop)\n\n\n\n\n\n","category":"function"},{"location":"manual/#Typstry.typst_cmd","page":"Manual","title":"Typstry.typst_cmd","text":"typst_cmd(s)\n\n\n\n\n\n","category":"function"},{"location":"#Typstry.jl","page":"Home","title":"Typstry.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package to access the Typst command-line interface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also their website, documentation, and repository.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Macros to construct Typst strings and commands\nFunctions to construct and render documents","category":"page"},{"location":"#Planned","page":"Home","title":"Planned","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Convert Julia values to Typst strings\nExplore rendering\nUnicode in the REPL?\nOther environments?","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg: add\n\njulia> add(url = \"https://github.com/jakobjpeters/Typstry.jl\")\n\njulia> using Typstry","category":"page"},{"location":"#Showcase","page":"Home","title":"Showcase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> document = typst\"\"\"\n       #set page(width: 10cm, height: auto)\n       #set heading(numbering: \"1.\")\n\n       = Fibonacci sequence\n       The Fibonacci sequence is defined through the recurrance relation\n       $F_n = F_(n-1) + F_(n-2)$. It can also be expressed in _closed form:_\n\n       $ F_n round(1 / sqrt(5) phi.alt^n), quad phi.alt = (1 + sqrt(5)) / 2 $\n\n       #let count = 8\n       #let nums = range(1, count + 1)\n       #let fib(n) = (\n           if n <= 2 { 1 }\n           else { fib(n - 1) + fib(n - 2) }\n       )\n\n       The first #count numbers of the sequence are:\n\n       #align(center, table(\n           columns: count,\n           ..nums.map(n => $F_#n$),\n           ..nums.map(n => str(fib(n))),\n       ))\n       \"\"\";\n\njulia> render(document);","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Showcase document)","category":"page"},{"location":"#Related-Projects","page":"Home","title":"Related Projects","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TypstGenerator.jl\nLaTeXStrings.jl\nLatexify.jl","category":"page"}]
}
