var documenterSearchIndex = {"docs":
[{"location":"manual/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"manual/internals/#Strings","page":"Internals","title":"Strings","text":"","category":"section"},{"location":"manual/internals/","page":"Internals","title":"Internals","text":"Typstry.settings\nTypstry.code_mode\nTypstry.depth\nTypstry.enclose\nTypstry.escape_quote\nTypstry.indent\nTypstry.inline\nTypstry.join_with\nTypstry.math_pad\nTypstry.mode\nTypstry.print_parameters","category":"page"},{"location":"manual/internals/#Typstry.settings","page":"Internals","title":"Typstry.settings","text":"settings\n\nA constant NamedTuple containing the default IOContext settings for show with the \"text/typst\" MIME type.\n\n\n\n\n\n","category":"constant"},{"location":"manual/internals/#Typstry.code_mode","page":"Internals","title":"Typstry.code_mode","text":"code_mode(io)\n\nPrint the number sign \"#\" unless mode(io) == code.\n\nSee also mode.\n\nExamples\n\njulia> Typstry.code_mode(IOContext(stdout, :mode => code))\n\njulia> Typstry.code_mode(IOContext(stdout, :mode => markup))\n#\n\njulia> Typstry.code_mode(IOContext(stdout, :mode => math))\n#\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.depth","page":"Internals","title":"Typstry.depth","text":"depth(io)\n\nReturn io[depth]::Int64.\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.enclose","page":"Internals","title":"Typstry.enclose","text":"enclose(f, io, x, left, right = reverse(left); settings...)\n\nCall f(io, x; settings...) between printing left and right, respectfully.\n\nExamples\n\njulia> Typstry.enclose((io, i; x) -> print(io, i, x), stdout, 1, \"\\$ \"; x = \"x\")\n$ 1x $\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.escape_quote","page":"Internals","title":"Typstry.escape_quote","text":"escape_quote(io, s)\n\nPrint the string, with quotes \"\\\"\" escaped.\n\nExamples\n\njulia> Typstry.escape_quote(stdout, TypstString(\"a\"))\n\"\\\"a\\\"\"\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.indent","page":"Internals","title":"Typstry.indent","text":"indent(io)\n\nReturn io[indent]::String.\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.inline","page":"Internals","title":"Typstry.inline","text":"inline(io)\n\nReturn io[inline]::Bool.\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.join_with","page":"Internals","title":"Typstry.join_with","text":"join_with(f, io, xs, delimeter; settings...)\n\nSimilar to join, except printing with f(io, x; settings...).\n\nExamples\n\njulia> Typstry.join_with((io, i; x) -> print(io, -i, x), stdout, 1:4, \", \"; x = \"x\")\n-1x, -2x, -3x, -4x\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.math_pad","page":"Internals","title":"Typstry.math_pad","text":"math_pad(io, x)\n\nReturn \"\", \"\\$\", or \"\\$ \" depending on the mode and inline settings.\n\nExamples\n\njulia> Typstry.math_pad(IOContext(stdout, :mode => math))\n\"\"\n\njulia> Typstry.math_pad(IOContext(stdout, :mode => markup, :inline => true))\n\"\\$\"\n\njulia> Typstry.math_pad(IOContext(stdout, :mode => markup, :inline => false))\n\"\\$ \"\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.mode","page":"Internals","title":"Typstry.mode","text":"mode(io)\n\nReturn io[mode]::Mode.\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.print_parameters","page":"Internals","title":"Typstry.print_parameters","text":"print_parameters(io, f, keys)\n\nPrint the name of a Typst function, an opening parenthesis, the parameters to a Typst function, and a newline.\n\nSkip keys that are not in the IOContext.\n\nExamples\n\njulia> Typstry.print_parameters(\n           IOContext(stdout, :delim => \"\\\"(\\\"\"),\n       \"vec\", [:delim, :gap])\nvec(delim: \"(\",\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Commands","page":"Internals","title":"Commands","text":"","category":"section"},{"location":"manual/internals/","page":"Internals","title":"Internals","text":"Typstry.typst_program","category":"page"},{"location":"manual/internals/#Typstry.typst_program","page":"Internals","title":"Typstry.typst_program","text":"typst_program\n\nA constant Cmd that is the Typst command-line interface given by Typst_jll.jl with no additional parameters.\n\n\n\n\n\n","category":"constant"},{"location":"manual/strings/#Strings","page":"Strings","title":"Strings","text":"","category":"section"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"For a type T, implement show(::IO, ::MIME\"text/typst\", ::T) to specify default settings and show_typst(::IO, ::T) to specify its Typst code.","category":"page"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"(Image: strings)","category":"page"},{"location":"manual/strings/#Typstry","page":"Strings","title":"Typstry","text":"","category":"section"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"Mode\nTypstString\nTypstText\n@typst_str\nshow_typst","category":"page"},{"location":"manual/strings/#Typstry.Mode","page":"Strings","title":"Typstry.Mode","text":"Mode\n\nAn Enumerated type to indicate whether the current context is in code, markup, or math mode.\n\njulia> Mode\nEnum Mode:\ncode = 0\nmarkup = 1\nmath = 2\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Typstry.TypstString","page":"Strings","title":"Typstry.TypstString","text":"TypstString <: AbstractString\nTypstString(x, ::Pair{Symbol}...)\n\nConstruct a string from show with MIME\"text/typst\".\n\nThis type implements the String interface. However, this interface is unspecified which may result in missing functionality.\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Typstry.TypstText","page":"Strings","title":"Typstry.TypstText","text":"TypstText(::Any)\n\nA wrapper to construct a TypstString using print instead of show with the \"text/typst\" MIME type.\n\ninfo: Info\nUse TypstText to insert text into a TypstString and by extension a Typst source file. Use Text to directly insert text into a Typst document.Note that unescaped control characters, such as \"\\n\", in TypstStrings are not escaped when being printed. This may break formatting in some environments such as the REPL.\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Typstry.@typst_str","page":"Strings","title":"Typstry.@typst_str","text":"@typst_str(s)\ntypst\"s\"\n\nConstruct a TypstString.\n\nValues can be interpolated by calling the TypstString constructor, except with a backslash \\ instead of the type name.\n\ntip: Tip\nUse show with MIME\"text/typst\" to print directly to an IO.See also the performance tip to avoid string interpolation for I/O.\n\nExamples\n\njulia> x = 1;\n\njulia> typst\"$\\(x) / \\(x + 1)$\"\ntypst\"$1 / 2$\"\n\njulia> typst\"\\(x // 2)\"\ntypst\"$1 / 2$\"\n\njulia> typst\"\\(x // 2, :mode => math)\"\ntypst\"1 / 2\"\n\njulia> typst\"\\\\(x)\"\ntypst\"\\\\(x)\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/strings/#Typstry.show_typst","page":"Strings","title":"Typstry.show_typst","text":"show_typst(io, x)\n\nSettings are used in Julia to format the TypstString and can be any type. Parameters are passed to a Typst function and must be a String. Parameters have the same name as in Typst, except that dashes \"-\" are replaced with underscores \"_\".\n\nType Settings Parameters\nAbstractChar :mode \nAbstractFloat  \nAbstractMatrix :mode, :inline, :indent, :depth :delim, :augment, :gap, :row_gap, :column_gap\nAbstractString :mode \nAbstractVector :mode, :inline, :indent, :depth :delim, :gap\nBool :mode \nComplex :mode, :inline \nIrrational :mode \nNothing :mode \nOrdinalRange{<:Integer,Â <:Integer} :mode \nRational :mode, :inline \nRegex :mode \nSigned  \nText :mode \nTypstText  \n\nwarning: Warning\nThis function's methods are incomplete. Please file an issue or create a pull-request for missing methods. It is safe to implement missing methods (via type-piracy) until it has been released in a new minor version of Typstry.jl.\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base","page":"Strings","title":"Base","text":"","category":"section"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"IOBuffer\n*\ncodeunit\nisvalid\niterate\nncodeunits\npointer\nshow(::IO, ::MIME\"text/typst\", ::Any)\nshow(::IO, ::TypstString)","category":"page"},{"location":"manual/strings/#Base.IOBuffer","page":"Strings","title":"Base.IOBuffer","text":"IOBuffer(::TypstString)\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Base.:*","page":"Strings","title":"Base.:*","text":"*(::TypstString, ::TypstString)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.codeunit","page":"Strings","title":"Base.codeunit","text":"codeunit(::TypstString)\n\n\n\n\n\ncodeunit(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.isvalid","page":"Strings","title":"Base.isvalid","text":"isvalid(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.iterate","page":"Strings","title":"Base.iterate","text":"iterate(::TypstString)\n\n\n\n\n\niterate(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.ncodeunits","page":"Strings","title":"Base.ncodeunits","text":"ncodeunits(::TypstString)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.pointer","page":"Strings","title":"Base.pointer","text":"pointer(::TypstString)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.show-Tuple{IO, MIME{Symbol(\"text/typst\")}, Any}","page":"Strings","title":"Base.show","text":"show(::IO, ::MIME\"text/typst\", x)\n\nPrint x in Typst format.\n\nProvides default settings for show_typst.\n\nSetting Default Type Description\n:mode markup Mode The current Typst context where code follows the number sign #, markup is at the top-level and enclosed in square brackets [], and math is enclosed in dollar signs $.\n:inline true Bool When mode = math, specifies whether the enclosing dollar signs $ are padded with a space to render the element inline or its own block.\n:indent 'Â 'Â ^Â 4 String The string used for horizontal spacing by some elements with multi-line Typst code.\n:depth 0 Int The current level of nesting within container types to specify the degree of indentation.\n\n\n\n\n\n","category":"method"},{"location":"manual/strings/#Base.show-Tuple{IO, TypstString}","page":"Strings","title":"Base.show","text":"show(::IO, ::TypstString)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using Typstry)","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia is a language designed for high-performance scientific computing. Typst is a language designed for easy and precise typesetting. Typstry.jl is the interface to convert the computational power of Julia into beautifully formatted Typst documents.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also Typst's website, documentation, and repository.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg: add\n\njulia> add(url = \"https://github.com/jakobjpeters/Typstry.jl\")\n\njulia> using Typstry","category":"page"},{"location":"#Showcase","page":"Home","title":"Showcase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> show_typst(IOContext(stdout, :mode => code), 'a')\n\"'a'\"\n\njulia> show(stdout, \"text/typst\", [true 1; 1.0 [Any[true 1; 1.0 nothing]]])\n$mat(\n    \"true\", 1;\n    1.0, mat(\n        \"true\", 1;\n        1.0, \"\"\n    )\n)$\n\njulia> TypstString(1//2, :inline => false)\ntypst\"$ 1 / 2 $\"\n\njulia> typst\"$ \\(1 + 2im, :mode => math) $\"\ntypst\"$ 1 + 2i $\"\n\njulia> TypstCommand([\"help\"])\ntypst`help`\n\njulia> typst`compile input.typ output.pdf`\ntypst`compile input.typ output.pdf`","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Strings\nConvert Julia values to Typst using show with the \"text/typst\" MIME type\nSpecify Julia settings and Typst parameters in the IOContext\nImplement show_typst for custom types\nCreate and manipulate TypstStrings\nInterpolate formatted Julia values using @typst_str\nCommands\nRender documents using the Typst command-line interface\nConstruct TypstCommands with vectors of strings or using @typst_cmd","category":"page"},{"location":"#Planned","page":"Home","title":"Planned","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Implement show_typst for more types\nBase\nStandard Library\nPackage extensions\nExplore rendering environments\nREPL Unicode\nNotebooks\nOther?","category":"page"},{"location":"#Related-Packages","page":"Home","title":"Related Packages","text":"","category":"section"},{"location":"#Typst","page":"Home","title":"Typst","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Labelyst.jl\nSummaryTables.jl\nTypstGenerator.jl","category":"page"},{"location":"#LaTeX","page":"Home","title":"LaTeX","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Latexify.jl\nLaTeXStrings.jl\nLatexPrint.jl","category":"page"},{"location":"manual/commands/#Commands","page":"Commands","title":"Commands","text":"","category":"section"},{"location":"manual/commands/#Typstry","page":"Commands","title":"Typstry","text":"","category":"section"},{"location":"manual/commands/","page":"Commands","title":"Commands","text":"TypstCommand\n@typst_cmd","category":"page"},{"location":"manual/commands/#Typstry.TypstCommand","page":"Commands","title":"Typstry.TypstCommand","text":"TypstCommand(::Vector{String})\nTypstCommand(::TypstCommand; kwargs...)\n\nThe Typst command-line interface.\n\nThis type implements the Cmd interface. However, this interface is unspecified which may result in missing functionality.\n\nExamples\n\njulia> help = TypstCommand([\"help\"])\ntypst`help`\n\njulia> TypstCommand(help; ignorestatus = true)\ntypst`help`\n\n\n\n\n\n","category":"type"},{"location":"manual/commands/#Typstry.@typst_cmd","page":"Commands","title":"Typstry.@typst_cmd","text":"@typst_cmd(parameters)\ntypst`parameters...`\n\nConstruct a TypstCommand without interpolation.\n\nEach parameter must be separated by a space \" \".\n\nExamples\n\njulia> typst`help`\ntypst`help`\n\njulia> typst`compile input.typ output.typ`\ntypst`compile input.typ output.typ`\n\n\n\n\n\n","category":"macro"},{"location":"manual/commands/#Base","page":"Commands","title":"Base","text":"","category":"section"},{"location":"manual/commands/","page":"Commands","title":"Commands","text":"addenv\ndetach\nignorestatus\nrun\nsetcpuaffinity\nsetenv\nshow(::IO, ::TypstCommand)","category":"page"},{"location":"manual/commands/#Base.addenv","page":"Commands","title":"Base.addenv","text":"addenv(::TypstCommand, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.detach","page":"Commands","title":"Base.detach","text":"detach(::TypstCommand)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.ignorestatus","page":"Commands","title":"Base.ignorestatus","text":"ignorestatus(::TypstCommand)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.run","page":"Commands","title":"Base.run","text":"run(::TypstCommand, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.setcpuaffinity","page":"Commands","title":"Base.setcpuaffinity","text":"setcpuaffinity(::TypstCommand, cpus)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.setenv","page":"Commands","title":"Base.setenv","text":"setenv(::TypstCommand, env; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.show-Tuple{IO, TypstCommand}","page":"Commands","title":"Base.show","text":"show(::IO, ::TypstCommand)\n\n\n\n\n\n","category":"method"}]
}
