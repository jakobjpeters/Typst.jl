var documenterSearchIndex = {"docs":
[{"location":"manual/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"manual/internals/#Strings","page":"Internals","title":"Strings","text":"","category":"section"},{"location":"manual/internals/","page":"Internals","title":"Internals","text":"Typstry.TypstText\nTypstry.join_with\nTypstry.enclose\nTypstry.math_pad","category":"page"},{"location":"manual/internals/#Typstry.TypstText","page":"Internals","title":"Typstry.TypstText","text":"TypstText, indent_width, string_with_env\n\nWrap a String to construct a TypstString instead of dispatching to show.\n\n\n\n\n\n","category":"type"},{"location":"manual/internals/#Typstry.join_with","page":"Internals","title":"Typstry.join_with","text":"join_with(f, io, xs, delimeter; settings...)\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.enclose","page":"Internals","title":"Typstry.enclose","text":"enclose(f, io, x, left, right = reverse(left); settings...)\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.math_pad","page":"Internals","title":"Typstry.math_pad","text":"math_pad(io, x)\n\nRequires :mode and :inline.\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/","page":"Internals","title":"Internals","text":"Typstry.typst_mime\nTypstry.settings\nTypstry.typst_executable\nTypstry.escape_quote\nTypstry.code_mode\nTypstry.print_parameters","category":"page"},{"location":"manual/internals/#Typstry.typst_mime","page":"Internals","title":"Typstry.typst_mime","text":"typst_mime\n\n\n\n\n\n","category":"constant"},{"location":"manual/internals/#Typstry.settings","page":"Internals","title":"Typstry.settings","text":"settings\n\n\n\n\n\n","category":"constant"},{"location":"manual/internals/#Typstry.typst_executable","page":"Internals","title":"Typstry.typst_executable","text":"typst_executable\n\n\n\n\n\n","category":"constant"},{"location":"manual/internals/#Typstry.escape_quote","page":"Internals","title":"Typstry.escape_quote","text":"escape_quote(io, s)\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.code_mode","page":"Internals","title":"Typstry.code_mode","text":"code_mode(io)\n\nRequires :mode.\n\n\n\n\n\n","category":"function"},{"location":"manual/internals/#Typstry.print_parameters","page":"Internals","title":"Typstry.print_parameters","text":"print_parameters(io, f, parameters)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Strings","page":"Strings","title":"Strings","text":"","category":"section"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"For a type T, implement show(::IO, ::MIME\"text/typst\", ::T) to specify default settings and show_typst(::IO, ::T) to specify its Typst code.","category":"page"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"(Image: show)","category":"page"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"TypstString\n@typst_str\nMode\nshow(::IO, ::MIME\"text/typst\", ::Any)\nshow_typst","category":"page"},{"location":"manual/strings/#Typstry.TypstString","page":"Strings","title":"Typstry.TypstString","text":"TypstString <: AbstractString\nTypstString(x, ::Pair{Symbol}...)\n\nConstruct a string from show with MIME\"text/typst\".\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Typstry.@typst_str","page":"Strings","title":"Typstry.@typst_str","text":"@typst_str(s)\ntypst\"s\"\n\nConstruct a TypstString.\n\nValues can be interpolated by calling the TypstString constructor, except with a backslash \\ instead of the type name.\n\ntip: Tip\nUse show with MIME\"text/typst\" to print directly to an IO.See also the performance tip to avoid string interpolation for I/O.\n\nExamples\n\njulia> x = 1;\n\njulia> typst\"$\\(x) / \\(x + 1)$\"\ntypst\"$1 / 2$\"\n\njulia> typst\"\\(x // 2)\"\ntypst\"$1 / 2$\"\n\njulia> typst\"\\(x // 2, :mode => math)\"\ntypst\"1 / 2\"\n\njulia> typst\"\\\\(x)\"\ntypst\"\\\\(x)\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/strings/#Typstry.Mode","page":"Strings","title":"Typstry.Mode","text":"Mode\n\nAn Enumerated type to indicate whether the current context is in code, markup, or math mode.\n\njulia> Mode\nEnum Mode:\ncode = 0\nmarkup = 1\nmath = 2\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Base.show-Tuple{IO, MIME{Symbol(\"text/typst\")}, Any}","page":"Strings","title":"Base.show","text":"show(::IO, ::MIME\"text/typst\", x)\n\nWrite x to io as Typst code.\n\nProvides default settings for show_typst.\n\nSetting Default Type Description\n:mode markup Mode The current Typst context where code follows the number sign #, markup is at the top-level and enclosed in square brackets [], and math is enclosed in dollar signs $.\n:inline true Bool When mode = math, specifies whether the enclosing dollar signs $ are padded with a space to render the element inline or its own block.\n:indent ' ' ^ 4 String The string used for horizontal spacing by some elements with multi-line Typst code.\n:depth 0 Int The current level of nesting within container types to specify the degree of indentation.\n\n\n\n\n\n","category":"method"},{"location":"manual/strings/#Typstry.show_typst","page":"Strings","title":"Typstry.show_typst","text":"show_typst(io, x)\n\nSettings are used in Julia to format the TypstString and can be any type. Parameters are passed to a Typst function and must be a String.\n\nType Settings Parameters\nAbstractChar :mode \nAbstractFloat  \nAbstractMatrix :mode, :inline, :indent, :depth :delim, :augment, :gap, :row_gap, :column_gap\nAbstractString :mode \nAbstractVector :mode, :inline, :indent, :depth :delim, :gap\nBool :mode \nComplex :mode, :inline \nIrrational :mode \nNothing :mode \nOrdinalRange{<:Integer, <:Integer} :mode \nRational :mode, :inline \nRegex :mode \nSigned  \nText :mode \nTypstText  \n\nwarning: Warning\nThis function's methods are incomplete. Please file an issue or create a pull-request for missing methods. It is safe to implement missing methods (via type-piracy) until it has been released in a new minor version of Typstry.jl.\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Interface","page":"Strings","title":"Interface","text":"","category":"section"},{"location":"manual/strings/","page":"Strings","title":"Strings","text":"IOBuffer\n*\ncodeunit\nisvalid\niterate\nncodeunits\npointer\nshow(::IO, ::TypstString)","category":"page"},{"location":"manual/strings/#Base.IOBuffer","page":"Strings","title":"Base.IOBuffer","text":"IOBuffer(::TypstString)\n\n\n\n\n\n","category":"type"},{"location":"manual/strings/#Base.:*","page":"Strings","title":"Base.:*","text":"*(::TypstString, ::TypstString)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.codeunit","page":"Strings","title":"Base.codeunit","text":"codeunit(::TypstString)\n\n\n\n\n\ncodeunit(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.isvalid","page":"Strings","title":"Base.isvalid","text":"isvalid(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.iterate","page":"Strings","title":"Base.iterate","text":"iterate(::TypstString)\n\n\n\n\n\niterate(::TypstString, ::Integer)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.ncodeunits","page":"Strings","title":"Base.ncodeunits","text":"ncodeunits(::TypstString)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.pointer","page":"Strings","title":"Base.pointer","text":"pointer(::TypstString)\n\n\n\n\n\n","category":"function"},{"location":"manual/strings/#Base.show-Tuple{IO, TypstString}","page":"Strings","title":"Base.show","text":"show(::IO, ::TypstString)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using Typstry)","category":"page"},{"location":"#Typstry.jl","page":"Home","title":"Typstry.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See also Typst's website, documentation, and repository.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Write Typst strings\nConvert Julia values\nRun Typst commands","category":"page"},{"location":"#Planned","page":"Home","title":"Planned","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Explore rendering\nUnicode in the REPL?\nOther environments?","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg: add\n\njulia> add(url = \"https://github.com/jakobjpeters/Typstry.jl\")\n\njulia> using Typstry","category":"page"},{"location":"#Showcase","page":"Home","title":"Showcase","text":"","category":"section"},{"location":"#Related-Packages","page":"Home","title":"Related Packages","text":"","category":"section"},{"location":"#Typst","page":"Home","title":"Typst","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TypstGenerator.jl\nLabelyst.jl","category":"page"},{"location":"#LaTeX","page":"Home","title":"LaTeX","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Latexify.jl\nLaTeXStrings.jl\nLatexPrint.jl","category":"page"},{"location":"manual/commands/#Command","page":"Commands","title":"Command","text":"","category":"section"},{"location":"manual/commands/","page":"Commands","title":"Commands","text":"TypstCommand\n@typst_cmd","category":"page"},{"location":"manual/commands/#Typstry.TypstCommand","page":"Commands","title":"Typstry.TypstCommand","text":"TypstCommand\nTypstCommand(::Vector{String})\nTypstCommand(::TypstCommand; kwargs...)\n\nThe Typst command-line interface.\n\nThis command attempts to support the same interface as Cmd. However, this interface is unspecified which may result in missing functionality.\n\nExamples\n\njulia> help = TypstCommand([\"help\"])\ntypst`help`\n\njulia> TypstCommand(help; ignorestatus = true)\ntypst`help`\n\n\n\n\n\n","category":"type"},{"location":"manual/commands/#Typstry.@typst_cmd","page":"Commands","title":"Typstry.@typst_cmd","text":"@typst_cmd(parameters)\ntypst`parameters...`\n\nConstruct a TypstCommand without interpolation.\n\nEach parameter must be separated by a space \" \".\n\nExamples\n\njulia> typst`help`\ntypst`help`\n\njulia> typst`compile input.typ output.typ`\ntypst`compile input.typ output.typ`\n\n\n\n\n\n","category":"macro"},{"location":"manual/commands/#Interface","page":"Commands","title":"Interface","text":"","category":"section"},{"location":"manual/commands/","page":"Commands","title":"Commands","text":"addenv\ndetach\nignorestatus\nrun\nsetcpuaffinity\nsetenv\nshow(::IO, ::TypstCommand)","category":"page"},{"location":"manual/commands/#Base.addenv","page":"Commands","title":"Base.addenv","text":"addenv(::TypstCommand, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.detach","page":"Commands","title":"Base.detach","text":"detach(::TypstCommand)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.ignorestatus","page":"Commands","title":"Base.ignorestatus","text":"ignorestatus(::TypstCommand)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.run","page":"Commands","title":"Base.run","text":"run(::TypstCommand, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.setcpuaffinity","page":"Commands","title":"Base.setcpuaffinity","text":"setcpuaffinity(::TypstCommand, cpus)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.setenv","page":"Commands","title":"Base.setenv","text":"setenv(::TypstCommand, env; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"manual/commands/#Base.show-Tuple{IO, TypstCommand}","page":"Commands","title":"Base.show","text":"show(::IO, ::TypstCommand)\n\n\n\n\n\n","category":"method"}]
}
